{"version":3,"file":"static/js/729.24e8d00c.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"MoviesList_moviesList__P6SP5\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n// ========== styles ==========\n\nimport css from './MoviesList.module.css';\n\nconst MoviesList = ({ movies, search }) => {\n  const location = useLocation();\n\n  return (\n    <ul className={css.moviesList}>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <Link\n            to={{\n              pathname: `/movies/${id}`,\n            }}\n            state={{\n              from: location,\n              search: search,\n            }}\n          >\n            {title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n  search: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchForm\":\"SearchBar_searchForm__V6XO6\",\"searchForm_button\":\"SearchBar_searchForm_button__74xgm\",\"searchForm_button_label\":\"SearchBar_searchForm_button_label__vQ9KH\",\"searchForm_input\":\"SearchBar_searchForm_input__Mmbyc\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n// ========== styles ==========\n\nimport css from './SearchBar.module.css';\n\nconst SearchBar = ({ onSubmit }) => {\n  const [search, setSearch] = useState('');\n\n  const handleChange = ({ target }) => {\n    const { value } = target;\n    setSearch(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(search);\n    setSearch('');\n  };\n\n  return (\n    <form className={css.searchForm} onSubmit={handleSubmit}>\n      <button className={css.searchForm_button} type=\"submit\">\n        <span className={css.searchForm_button_label}>Search</span>\n      </button>\n\n      <input\n        className={css.searchForm_input}\n        type=\"text\"\n        name=\"search\"\n        value={search}\n        onChange={handleChange}\n        placeholder=\"Search movie by name\"\n        autoComplete=\"off\"\n        autoFocus\n        required\n      />\n    </form>\n  );\n};\n\nexport default SearchBar;\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\n// ========== API ==========\n\nimport { fetchMovies } from 'services/api';\n\n// ========== components ==========\n\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport SearchBar from 'components/SearchBar/SearchBar';\n\nconst Movies = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [search, setSearch] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState();\n\n  // load movies on initial render or when search term changes\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const query = params.get('query');\n\n    if (query) {\n      setSearch(query);\n      fetchMovies(query)\n        .then(({ results }) => setMovies(results))\n        .catch(error => setError(error));\n    }\n  }, [location.search]);\n\n  const onMovieSearch = search => {\n    setSearch(search);\n    setMovies([]);\n    // Update the URL with the search query\n    navigate(`?query=${search}`);\n  };\n\n  return (\n    <main>\n      <SearchBar onSubmit={onMovieSearch} initialValue={search} />\n      {error && <p>{error}</p>}\n      {search && movies.length === 0 && (\n        <p>\n          We do not find any movie with such name. Please, try another keyword!\n        </p>\n      )}\n      {search && movies.length > 0 && (\n        <MoviesList movies={movies} search={search} />\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'a20616a55c666b428048dd0d7103de62';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const fetchTrendingMovies = async page => {\n  const response = await instance.get(`/trending/movie/day`, {\n    params: {\n      page,\n    },\n  });\n\n  return response.data;\n};\n\nexport const fetchMovies = async query => {\n  const response = await instance.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n\n  return response.data;\n};\n\nexport const getMovieById = async id => {\n  const response = await instance.get(`/movie/${id}`, {\n    params: {\n      movie_id: id,\n    },\n  });\n\n  return response.data;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await instance.get(`/movie/${id}/credits`, {\n    params: {\n      movie_id: id,\n    },\n  });\n\n  return response.data;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await instance.get(`/movie/${id}/reviews`, {\n    params: {\n      movie_id: id,\n    },\n  });\n\n  return response.data;\n};\n"],"names":["movies","search","location","useLocation","className","css","map","id","title","to","pathname","state","from","onSubmit","useState","setSearch","e","preventDefault","type","name","value","onChange","target","placeholder","autoComplete","autoFocus","required","navigate","useNavigate","setMovies","error","setError","useEffect","query","URLSearchParams","get","fetchMovies","then","results","catch","initialValue","length","MoviesList","instance","axios","baseURL","params","api_key","fetchTrendingMovies","page","response","data","getMovieById","movie_id","getMovieCredits","getMovieReviews"],"sourceRoot":""}